class Solution {
  public:
    void store_left(Node* root,stack<Node*>& st){
        Node* curr = root;
        while(curr != NULL){
            st.push(curr);
            curr = curr->left;
        }
    }
    vector<int> merge(Node *root1, Node *root2) {
        stack<Node*> st1,st2;
        
        vector<int> ans;
        
        store_left(root1,st1);
        store_left(root2,st2);
        
        while(!st1.empty() && !st2.empty()){
            
            if(st1.top()->data < st2.top()->data){
                Node* curr = st1.top();
                st1.pop();
                ans.push_back(curr->data);
                store_left(curr->right,st1);
            }
            else if(st2.top()->data < st1.top()->data){
                Node* curr = st2.top();
                st2.pop();
                ans.push_back(curr->data);
                store_left(curr->right,st2);
            }
            else{
                Node* curr1 = st1.top();
                Node* curr2 = st2.top();
                
                st1.pop();
                st2.pop();
                
                ans.push_back(curr1->data);
                ans.push_back(curr2->data);
                
                
                store_left(curr1->right,st1);
                store_left(curr2->right,st2);
            }
        }
        
        while(!st1.empty()){
            Node* curr1 = st1.top();
            st1.pop();
            ans.push_back(curr1->data);
            store_left(curr1->right,st1);
        }
        while(!st2.empty()){
            Node* curr2 = st2.top();
            st2.pop();
            ans.push_back(curr2->data);
            store_left(curr2->right,st2);
        }
        return ans;
    }
};

------------------------------------------------------------------------------------------

\qs-

Given two BSTs, return elements of merged BSTs in sorted form.

Examples :

Input:
BST1:
       5
     /   \
    3     6
   / \
  2   4  
BST2:
        2
      /   \
     1     3
            \
             7
            /
           6
Output: 1 2 2 3 3 4 5 6 6 7
Explanation: After merging and sorting the two BST we get 1 2 2 3 3 4 5 6 6 7.
Input:
BST1:
       12
     /   
    9
   / \    
  6   11
BST2:
      8
    /  \
   5    10
  /
 2
Output: 2 5 6 8 9 10 11 12
Explanation: After merging and sorting the two BST we get 2 5 6 8 9 10 11 12.
Expected Time Complexity: O((m+n)*log(m+n))
Expected Auxiliary Space: O(Height of BST1 + Height of BST2 + m + n)

Constraints:
1 ≤ Number of Nodes, value of nodes ≤ 105



