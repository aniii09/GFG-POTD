class Solution {
  public:
  //CODE Aniiii
    vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){
        vector<vector<int>> adj(N);
        for (auto it : edges) {
            //adj
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
        vector<int> distance(N, INT_MAX);
        distance[src] = 0;
        queue<int> q;
        q.push(src);
        //while part
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            for (int adjNode : adj[node]) {
                if (distance[node] + 1 < distance[adjNode]) {
                    distance[adjNode] = distance[node] + 1;
                    q.push(adjNode);
                }
            }
        }
        for (int i = 0; i < N; i++) {
            if (distance[i] == INT_MAX) {
                distance[i] = -1;
            }
        }
        //return
        return distance;
    }
    
};

---------------------------------------------------------------------------------------------------------------------------------

qs-

You are given an Undirected Graph having unit weight of the edges, find the shortest path from src to all the vertex and if it is unreachable to reach any vertex, then return -1 for that vertex.

Examples :

Input:
n = 9, m = 10
edges=[[0,1],[0,3],[3,4],[4,5],[5,6],[1,2],[2,6],[6,7],[7,8],[6,8]] 
src=0
Output:
0 1 2 1 2 3 3 4 4

Input:
n = 4, m = 2
edges=[[1,3],[3,0]] 
src=3
Output:
1 1 -1 0

Constraint:
1<=n,m<=104
0<=edges[i][j]<=n-1

Expected Time Complexity: O(N + E), where N is the number of nodes and E is the edges
Expected Space Complexity: O(N)
