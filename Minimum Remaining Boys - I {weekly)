class Solution {
public:
//code Aniii
    bool dfs(int boy, vector<vector<int>>& adj, vector<bool>& visited, vector<int>& match) {
        for (int girl : adj[boy]) {
            if (!visited[girl]) {
                visited[girl] = true;
                if (match[girl] == -1 || dfs(match[girl], adj, visited, match)) {
                    match[girl] = boy;
                    return true;
                }
            }
        }
        return false;
    }

    int minRemaining(int n, vector<vector<int>>& boys, vector<vector<int>>& girls) {
        vector<vector<int>> adj(n);

        // Build adjacency list where adj[i] contains all girls that can pair with boy i
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (boys[i][0] < girls[j][0] && boys[i][1] < girls[j][1]) {
                    adj[i].push_back(j);
                }
            }
        }

        vector<int> match(n, -1);  // match[i] stores the boy matched with girl i
        int matches = 0;

        // Try to match each boy
        for (int i = 0; i < n; ++i) {
            vector<bool> visited(n, false);
            if (dfs(i, adj, visited, match)) {
                matches++;
            }
        }

        // Unmatched boys are n - matches
        return n - matches;
    }
};
