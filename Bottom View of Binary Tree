class Solution {
  public:
    void solve(Node *root,int x,int y,map<int,pair<int,int>>& mp){
        //base case
        if(root==NULL){
            return;
        }
        if(mp.find(x) == mp.end() || mp[x].first<=y)
        mp[x]={y,root->data};
        solve(root->left,x-1,y+1,mp);
        solve(root->right,x+1,y+1,mp);
    }
    vector <int> bottomView(Node *root) {
        //codeAniii
        map<int,pair<int,int>> mp;
        solve(root,0,0,mp);
        vector<int> ans;
        for(auto it:mp){
            ans.push_back(it.second.second);
        }
        return ans;
    }
};


Qs-
Given a binary tree, return an array where elements represent the bottom view of the binary tree from left to right.

Note: If there are multiple bottom-most nodes for a horizontal distance from the root, then the latter one in the level traversal is considered. For example, in the below diagram, 3 and 4 are both the bottommost nodes at a horizontal distance of 0, here 4 will be considered.

                      20
                    /    \
                  8       22
                /   \     /   \
              5      3 4     25
                     /    \      
                 10       14

For the above tree, the output should be 5 10 4 14 25.

Examples :

Input:
       1
     /   \
    3     2
Output: 3 1 2
Explanation: First case represents a tree with 3 nodes and 2 edges where root is 1, left child of 1 is 3 and right child of 1 is 2.

Thus bottom view of the binary tree will be 3 1 2.
Input:
         10
       /    \
      20    30
     /  \
    40   60
Output: 40 20 60 30
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(n)

Constraints:
1 <= Number of nodes <= 105
1 <= Data of a node <= 105


