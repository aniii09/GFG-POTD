class Solution {
  public:
    bool findTriplet(vector<int>& arr) {
        //Code Aniii
        sort(arr.begin(),arr.end(),greater<int>());
        for(int i=0;i<arr.size();i++){
            int target=arr[i];
            int start=i+1;
            int end=arr.size()-1;
            while(start<end){
                if(arr[start]+arr[end]==target) return true;
                else if(arr[start]+arr[end]>target) start++;
                else end--;
            }
        }
        return false;
    }
};

------------------------------------------------------------------------------

Given an array arr of integers. Find whether three numbers are such that the sum of two elements equals the third element.

Example:

Input: arr[] = [1, 2, 3, 4, 5]
Output: true
Explanation: The pair (1, 2) sums to 3.
Input: arr[] = [5, 3, 4]
Output: false
Explanation: No triplets satisfy the condition.
Expected Time Complexity: O(n2)
Expected Auxilary Space: O(1)

Constraints:
1 <= arr.size() <= 103
0 <= arr[i] <= 105

