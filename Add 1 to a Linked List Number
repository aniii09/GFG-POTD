class Solution {
  public:
    Node* reverse(Node* head){
        Node *prev=NULL,*cur=head,*next=NULL;
        while(cur){
            next=cur->next;
            cur->next=prev;
            prev=cur;
            cur=next;
        }
        return prev;
        
    }
    Node* addOne(Node* head) {
        //CodeGenius
        head=reverse(head);
        int carry=1;
        Node* temp=head;
        Node* tail=NULL;
        while(temp && carry){
            if(temp->data==9) temp->data=0;
            else{
                temp->data=temp->data+1;
                carry=0;
            }
            tail=temp;
            temp=temp->next;
        }
        if(carry) tail->next=new Node(1);
        head=reverse(head);
        return head;
    }
};


----------------------------------------------------------------------------------------------------------------------------

qs-

You are given a linked list where each element in the list is a node and have an integer data. You need to add 1 to the number formed by concatinating all the list node numbers together and return the head of the modified linked list. 

Note: The head represents the first element of the given array.

Examples :

Input: LinkedList: 4->5->6
Output: 457

Explanation: 4->5->6 represents 456 and when 1 is added it becomes 457. 
Input: LinkedList: 1->2->3
Output: 124
 
Explanation:  1->2->3 represents 123 and when 1 is added it becomes 124. 
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 <= len(list) <= 105
0 <= list[i] <= 105
